name: CI

on:
  pull_request:
    branches:
      - main
      - work
  push:
    branches:
      - main
      - work

jobs:
  commitlint:
    name: Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine commit range
        id: range
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "from=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
            echo "to=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "from=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
            echo "to=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Install commitlint dependencies
        run: |
          npm install --no-save @commitlint/cli@19 @commitlint/config-conventional@19
      - name: Lint commits
        if: ${{ steps.range.outputs.from != '' }}
        env:
          FROM: ${{ steps.range.outputs.from }}
          TO: ${{ steps.range.outputs.to }}
        run: |
          npx commitlint --config commitlint.config.cjs --from "$FROM" --to "$TO"
      - name: Skip when no range available
        if: ${{ steps.range.outputs.from == '' }}
        run: echo "No commit range detected; skipping conventional commit lint."

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: pm
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> "$GITHUB_OUTPUT"
            echo "cache=pnpm" >> "$GITHUB_OUTPUT"
            echo "install=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=pnpm" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> "$GITHUB_OUTPUT"
            echo "cache=yarn" >> "$GITHUB_OUTPUT"
            echo "install=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=yarn" >> "$GITHUB_OUTPUT"
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm ci" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          else
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm install" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up pnpm
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.cache }}
      - name: Enable corepack
        if: ${{ steps.pm.outputs.manager != 'npm' }}
        run: corepack enable
      - name: Install dependencies
        run: ${{ steps.pm.outputs.install }}
      - name: Run lint
        if: ${{ hashFiles('package.json') != '' }}
        run: ${{ steps.pm.outputs['run-script'] }} lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: pm
        run: |
          # same detection script as lint
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> "$GITHUB_OUTPUT"
            echo "cache=pnpm" >> "$GITHUB_OUTPUT"
            echo "install=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=pnpm" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> "$GITHUB_OUTPUT"
            echo "cache=yarn" >> "$GITHUB_OUTPUT"
            echo "install=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=yarn" >> "$GITHUB_OUTPUT"
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm ci" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          else
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm install" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up pnpm
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.cache }}
      - name: Enable corepack
        if: ${{ steps.pm.outputs.manager != 'npm' }}
        run: corepack enable
      - name: Install dependencies
        run: ${{ steps.pm.outputs.install }}
      - name: Run typecheck
        if: ${{ hashFiles('package.json') != '' }}
        run: ${{ steps.pm.outputs['run-script'] }} typecheck

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: pm
        run: |
          # same detection script as lint
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> "$GITHUB_OUTPUT"
            echo "cache=pnpm" >> "$GITHUB_OUTPUT"
            echo "install=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=pnpm" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> "$GITHUB_OUTPUT"
            echo "cache=yarn" >> "$GITHUB_OUTPUT"
            echo "install=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=yarn" >> "$GITHUB_OUTPUT"
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm ci" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          else
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm install" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up pnpm
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.cache }}
      - name: Enable corepack
        if: ${{ steps.pm.outputs.manager != 'npm' }}
        run: corepack enable
      - name: Install dependencies
        run: ${{ steps.pm.outputs.install }}
      - name: Run unit tests
        if: ${{ hashFiles('package.json') != '' }}
        run: ${{ steps.pm.outputs['run-script'] }} test -- --watch=false

  build:
    name: Preview Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: pm
        run: |
          # same detection script as lint
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> "$GITHUB_OUTPUT"
            echo "cache=pnpm" >> "$GITHUB_OUTPUT"
            echo "install=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=pnpm" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> "$GITHUB_OUTPUT"
            echo "cache=yarn" >> "$GITHUB_OUTPUT"
            echo "install=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run-script=yarn" >> "$GITHUB_OUTPUT"
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm ci" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          else
            echo "manager=npm" >> "$GITHUB_OUTPUT"
            echo "cache=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm install" >> "$GITHUB_OUTPUT"
            echo "run-script=npm run" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up pnpm
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.cache }}
      - name: Enable corepack
        if: ${{ steps.pm.outputs.manager != 'npm' }}
        run: corepack enable
      - name: Install dependencies
        run: ${{ steps.pm.outputs.install }}
      - name: Generate preview build
        if: ${{ hashFiles('package.json') != '' }}
        run: ${{ steps.pm.outputs['run-script'] }} build